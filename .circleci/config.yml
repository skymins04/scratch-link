version: 2.1
workflows:
  macos:
    jobs:
      - build_for_mac:
          context: scratch-desktop-and-link
  windows:
    jobs:
      - build_for_windows:
          context: scratch-desktop-and-link
orbs:
  windows: circleci/windows@2.2.0
aliases:
  - &should_sign
    or:
      - equal: [ develop, << pipeline.git.branch >> ]
      - equal: [ main, << pipeline.git.branch >> ]
      - equal: [ master, << pipeline.git.branch >> ]
commands:
  build_windows_sln:
    parameters:
      SignedBuild:
        type: boolean
        default: false
    steps:
      - run:
          name: Build scratch-link.sln using MS Build (SignedBuild=<<parameters.SignedBuild>>)
          command: msbuild Windows/scratch-link.sln -p:Configuration=Release -p:Platform="Any CPU" -p:SignedBuild=<<parameters.SignedBuild>>
          environment: # WiX fails with ICE errors if the environment is too big
            CSC_MACOS: ""
            SDM_CERT: ""
            SDM_CERT_CA_BUNDLE: ""
            SDM_CERT_KEY: ""
jobs:
  build_for_mac:
    macos:
      xcode: "11.7.0"
    steps:
      - checkout
      # - when:
      #     condition:
      #       *should_sign
      #     steps:
      #       - run:
      #           name: Set up code-signing keychain
      #           # DO NOT RUN THIS on your own computer unless you really know what you're doing!
      #           command: |
      #             function decodeToFile () {
      #               if [ -z "$1" ]; then
      #                 echo "Missing or invalid filename"
      #                 return 1
      #               fi
      #               if [ -z "$2" ]; then
      #                 echo "Missing environment variable contents for file: $1"
      #                 return 2
      #               fi
      #               echo "$2" | base64 --decode > "$1"
      #             }
      #             decodeToFile macos-certs-scratch-foundation.p12 "${CSC_MACOS}"
      #             security -v create-keychain -p circleci circleci.keychain
      #             security -v default-keychain -s circleci.keychain
      #             security -v import macos-certs-scratch-foundation.p12 -k circleci.keychain -P "${CSC_MACOS_PASSWORD}" -T /usr/bin/codesign -T /usr/bin/productbuild
      #             security -v unlock-keychain -p circleci circleci.keychain
      #             # "set-key-partition-list" prints extensive not-so-useful output and adding "-q" (even multiple times) doesn't suppress it.
      #             # The "grep -v" at the end of this line suppresses all of that so any errors or warnings might be more visible.
      #             security -v set-key-partition-list -S apple-tool:,apple:,codesign: -s -k circleci circleci.keychain | grep -v '^    0x'
      #             security -v set-keychain-settings -lut 600 circleci.keychain
      #             security -v find-identity circleci.keychain
      #             rm macos-certs-scratch-foundation.p12
      - restore_cache:
          name: Restore Homebrew cache
          key: homebrew-cache-v3
      - run:
          name: Install Homebrew packages
          command: brew install pngcrush
      - save_cache:
          name: Save Homebrew cache
          paths:
            - ~/Library/Caches/Homebrew
            - /Library/Caches/Homebrew
          key: homebrew-cache-v3 # bump this version (and the one above) if you change the list of paths
      - restore_cache:
          name: Restore Swift dependency cache
          key: spm-cache-v2-{{ checksum "macOS/Package.resolved" }}
      - run:
          name: Resolve Swift dependencies
          command: make --directory=macOS resolve-dependencies
      - save_cache:
          name: Save Swift dependency cache
          key: spm-cache-v2-{{ checksum "macOS/Package.resolved" }}
          paths:
            - macOS/.build
      - run:
          # Scratch Link determines its version number based on repository status and commit log.
          # Print a basic status report to aid debugging.
          name: Check git status
          command: git status
      - run:
          name: Build the application
          command: make --directory=macOS zip
      - run:
          name: Move ZIP to Artifacts directory
          command: |
            mkdir -p macOS/Artifacts/
            mv -v macOS/dist/scratch-link-*.zip macOS/Artifacts/
      # - when:
      #     condition:
      #       *should_sign
      #     steps:
      #       - run:
      #           name: Sign the application
      #           command: make --directory=macOS dist
      #       - run:
      #           name: Move signed build products to Artifacts directory
      #           command: |
      #             mkdir -p macOS/Artifacts/
      #             mv -v macOS/dist/{scratch-link,mas-scratch-link}-*.pkg macOS/Artifacts/
      - store_artifacts:
          path: macOS/Artifacts/
  build_for_windows:
    executor: windows/default
    steps:
      - checkout
      - when:
          condition:
            *should_sign
          steps:
            - run:
                # Because of the non-standard user configuration on CircleCI's Windows VM, attempting to import a
                # certificate into the user's certificate store ("Cert:/LocalUser/My") will fail. Instead, this code
                # imports the PFX into the machine certificate store. That usually requires Administrator permissions,
                # but on CircleCI's setup it works just fine. See also: https://github.com/ShabadOS/desktop/issues/265
                # and https://github.com/ShabadOS/desktop/pull/266
                name: Import code-signing certificate
                shell: powershell
                command: |
                  $ErrorActionPreference = "Stop"
                  # TODO: is there a way to avoid creating a temporary file?
                  $tempPfx = New-TemporaryFile
                  try {
                      $env:WIN_CSC_LINK | Set-Content $tempPfx
                      $securePassword = (ConvertTo-SecureString -String $env:WIN_CSC_KEY_PASSWORD -AsPlainText -Force)
                      Import-PfxCertificate -FilePath $tempPfx -Password $securePassword -CertStoreLocation "Cert:/LocalMachine/My"
                  }
                  finally {
                      Remove-Item -Force $tempPfx
                  }
      - restore_cache:
          keys:
            - nuget-cache-{{ checksum "Windows/scratch-link/packages.config" }}-{{ checksum "Windows/ScratchLinkSetup/packages.config" }}
      - run:
          name: Install dependencies using NuGet
          command: nuget restore Windows/
      - save_cache:
          paths:
            - Windows/packages/
          key: nuget-cache-{{ checksum "Windows/scratch-link/packages.config" }}-{{ checksum "Windows/ScratchLinkSetup/packages.config" }}
      - run:
          # Scratch Link determines its version number based on repository status and commit log.
          # Print a basic status report to aid debugging.
          name: Check git status
          command: git status
      - when:
          condition:
            *should_sign
          steps:
            - build_windows_sln:
                SignedBuild: true
      - unless:
          condition:
            *should_sign
          steps:
            - build_windows_sln:
                SignedBuild: false
      - run:
          name: Move build products to artifacts directory
          command: |
            New-Item -Path Windows/ -Name Artifacts -ItemType directory
            Move-Item -Path Windows/ScratchLinkAPPX/AppPackages/ScratchLinkAPPX_*_AnyCPU_bundle.appxupload -Destination Windows/Artifacts/
            Move-Item -Path Windows/ScratchLinkSetup/bin/Release/ScratchLinkSetup-*.zip -Destination Windows/Artifacts/
      - store_artifacts:
          path: Windows/Artifacts/
